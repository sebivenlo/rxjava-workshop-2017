Intro:
- Concurrency
    - threading/multi-processing
    - event-driven programming
- functional programming
- Java 8 streams, lambdas, futures
    - Observable Pattern
- Modified Observable Pattern vs Iterator Pattern

- graphic examples of streams with basic operations:
    - simple input to observables
    - transformers (changing data)
    - consumers (output)
    - stream operations, part 1

Task 1:
    Refactor Donald's Restaurant in two steps:
    1. sequential, map strings -> order lines -> orders -> meals
- review
- parallelization
    2. add state (scan) and parallelization

- Error handling in RxJava
- generators (input)
- Cold vs. Hot Observables and Backpressure
- stream operations, part 2

Task 2:
    Tweet analysis
    http://blog.xebia.in/index.php/2015/08/31/day1-building-an-application-from-scratch-using-rxjava-and-java8/
    TBD

- review

###

Error Handling:
Errors are aggregated in the subscriber. If an error occurs anywhere in a chain of observables, it skips to the end, where everything can be handled at once. This way, operators and functions don't have to know how t handle exceptions other than the ones they might produce.
